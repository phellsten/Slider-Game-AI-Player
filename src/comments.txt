This project is mainly based on an altered version of Minimax, called Negamax. This uses the property that max(a, b) = −min(−a, −b), to find the best move. This reduces the use of recursion, as recursive functions for the min and max components in Minimax aren’t needed.


We dynamic programming, in the form of a tree to hold each move a piece can make, rather than the board itself to save more memory. The tree has a root board, and then all the nodes below it have the moves from the root board. We can then construct the board when required using this list of moves in order to obtain the evaluation value for a specific board configuration.


This additionally has the effect of making the program run quicker, as the whole tree doesn’t have to be regenerated with the possible moves, after a move. Instead these moves can be tracked, and the tree can be followed. Then only the moves at the end of the tree have to be created. However unlike an ordinary Minimax algorithm, this requires the values to be stored in RAM between turns. Additionally this uses more ram than a Minimax which doesn’t store its move, as an ordinary minimax algorithm just recursively generates the moves for each child node, and only store the value necessary. This requires the storing of the moves that make up the decision to be stored. Hence the tradeoff between RAM consumption and speed.


This is similar to using Negamax with transportation tables. This is where the nodes values are remembered for later use, reducing the amount of nodes that need to be calculated. However a limit can be applied to the table, to reduce the space required in RAM.  This achieves a compromise between CPU usage and RAM usage, as some moves might need to be regenerated. However it won’t be as much as not storing the values altogether.


The evaluation function tests the vertical component for the V player, and the horizontal component for the H player for every single piece on the board. It sums up values for our pieces and negates the opponent's pieces. This includes pieces that have moved off the board. This encourages pieces to move towards their end goal, while at the same time attempting to block the opponent player.